#!/usr/bin/env python

# python ./bin/dket-experiment-run --config experiments/425-curated.json --log-level DEBUG --force
import argparse
import logging
import os
import sys
import time
import datetime
import json

from dket import analytics
from dket import logutils
from dket import runtime
from dket import predict

CFG = runtime.Experiment.CONFIG_FILE_NAME
CLZ_MODEL_DEFAULT = 'PointingSoftmaxModel'
CLZ_OPTIMIZER_DEFAULT = 'SGD'

PATH = os.path.realpath(__file__)
BASE = os.path.dirname(PATH)

# pylint: disable=C0103,C0301,I0011
parser = argparse.ArgumentParser(prog='dket-experiment-run')
parser.add_argument('--config', type=str, required=True, help='The config.json configuration file of the experiment.')
parser.add_argument('--force', action='store_true', help='Overwrite existing files.')
parser.add_argument('--logdir', type=str, help='The basic logging directory', default=None)
parser.add_argument('--log-level', type=str, default='INFO', help='The log level.')
parser.add_argument('--log-to-stderr', action='store_true', help='Log to the stderr.')
parser.add_argument('--last-checkpoint', type=str, default='', help='The last checkpoint file')
# pylint: enable=C0103,C0301,I0011
ARGS = parser.parse_args()


if __name__ == '__main__':
    LOG = os.path.abspath(ARGS.config) + '.log'
    logutils.config(level=ARGS.log_level, fpath=LOG, stderr=ARGS.log_to_stderr)
    logging.info('executing: %s', PATH)
    logging.info('python version: %s', sys.version.replace('\n', ' '))
    logging.debug('--config: %s', ARGS.config)
    logging.debug('--force: %s', str(ARGS.force))
    logging.debug('--logdir: %s', ARGS.logdir)
    logging.debug('--log-level: %s', ARGS.log_level)
    logging.debug('--log-to-stderr: %s', str(ARGS.log_to_stderr))
    CONFIG = os.path.abspath(ARGS.config)
    try:
        START = time.time()
        config = json.load(open(CONFIG))
        if ARGS.last_checkpoint == '':
            experiment = runtime.Experiment.load(CONFIG, config, logdir=ARGS.logdir, force=ARGS.force)
            experiment.run()
        else:
            print("You can quit with 'exit'")
            while True:
                input_sentence = input("To predict: ")
                if input_sentence == "exit":
                    break
                predict.predict(input_sentence, CONFIG, config, ARGS)
            
        END = time.time()
        ELAPSED = END - START
        ELAPSED = datetime.timedelta(seconds=ELAPSED)
        logging.info('Total running time: %s', str(ELAPSED))
    except Exception as ex:  # pylint: disable=W0703
        logging.exception(str(ex))
        sys.exit(1)
